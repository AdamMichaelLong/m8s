syntax = "proto3";

package pr;

service PR {
    rpc Build (BuildRequest) returns (stream BuildResponse) {}
    rpc Describe (DescribeRequest) returns (DescribeResponse) {}
    rpc List (ListRequest) returns (ListResponse) {}

    // Used for setting and getting SSH credentials.
    rpc SSHSet (SSHSetRequest) returns (SSHSetResponse) {}
    rpc SSHGet (SSHGetRequest) returns (SSHGetResponse) {}

    // Used for setting and getting Docker registry secrets.
    rpc DockerCfgSet (DockerCfgSetRequest) returns (DockerCfgSetResponse) {}
    rpc DockerCfgGet (DockerCfgGetRequest) returns (DockerCfgGetResponse) {}
}

// Credentials is used for authenicating with the PR service.
message Credentials {
    string Token = 1;
}

// BuildRequest is used for submitting a new build.
message BuildRequest {
    Credentials Credentials = 1;
    Metadata Metadata = 2;
    Compose Compose = 3;
    GitCheckout GitCheckout = 4;
    Exec Exec = 5;
}

// Metadata is high level information about the build.
message Metadata {
  string Name = 2;
  repeated string Domains = 3;
}

// GitCheckout is the details required to checkout the codebase.
message GitCheckout {
    // The repository we are cloning:
    // * https://github.com/owner/repo.git
    // * https://<token>:x-oauth-basic@github.com/owner/repo.git
    string Repository = 1;
    string Revision = 2;
}

// Compose is our environment data, marshalled from a docker compose file.
message Compose {
  repeated ComposeService Services = 1;
}

// ComposeService is a container defintion, which we will use to build a pod.
message ComposeService {
  string Name = 1;
  string Image = 2;
  repeated string Volumes = 3;
  repeated string Ports = 4;
  repeated string Environment = 5;
}

// Exec has the steps we require to build an environment and in which container.
message Exec {
  string Container = 1;
  repeated string Steps = 5;
}

// BuildResponse is a streamed response used for printing build output and status.
message BuildResponse {
  string Message = 1;
}

// Container shows a container which is deployed in an Environment.
message Container {
    string Name = 1;
    string Image = 2;
}

// Environment shows a group of containers which have been deployed.
message Environment {
    string Namespace = 1;
    string Name = 2;
    repeated string Domains = 3;
    repeated Container Containers = 4;
}

// DescribeRequest asks for an Environment which has already been deployed.
message DescribeRequest {
    Credentials Credentials = 1;
    string Name = 2;
}

// DescribeResponse responds with an Environment.
message DescribeResponse {
    Environment Environment = 1;
}

// DescribeRequest asks for all the Environments.
message ListRequest {
    Credentials Credentials = 1;
}

// ListResponse returns a list of Environments.
message ListResponse {
    repeated Environment Environments = 1;
}

// SSH containers secrets for performing SSH commands on private endpoints.
message SSH {
    bytes KnownHosts = 1;
    bytes PrivateKey = 2;
}

// SetSSHRequest allows for the developer to set SSH secrets "out of band".
message SSHSetRequest {
    Credentials Credentials = 1;
    SSH SSH = 2;
}

// SetSSHResponse is a response after setting SSH.
message SSHSetResponse {}

// SSHGetRequest request for the SSH configuration.
message SSHGetRequest {
    Credentials Credentials = 1;
}

// SSHGetResponse returns the SSH configuration.
message SSHGetResponse {
    SSH SSH = 1;
}

// DockerCfg contains standard Docker configuration eg ~/.docker/config
message DockerCfg {
    string Registry = 1;
    string Username = 2;
    string Password = 3;
    string Email = 4;
    string Auth = 5;
}

// DockerCfgSetRequest is for setting new Docker configuration.
message DockerCfgSetRequest {
    Credentials Credentials = 1;
    DockerCfg DockerCfg = 2;
}

// DockerCfgSetResponse returns if setting the Docker configuration was a success.
message DockerCfgSetResponse {}

// DockerCfgGetRequest requests the Docker configuration.
message DockerCfgGetRequest {
    Credentials Credentials = 1;
}

// DockerCfgGetResponse returns the Docker configuration.
message DockerCfgGetResponse {
    DockerCfg DockerCfg = 1;
}