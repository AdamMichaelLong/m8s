// Code generated by protoc-gen-go. DO NOT EDIT.
// source: m8s.proto

/*
Package m8s is a generated protocol buffer package.

It is generated from these files:
	m8s.proto

It has these top-level messages:
	Credentials
	BuildRequest
	Metadata
	BasicAuth
	GitCheckout
	Compose
	ComposeService
	Exec
	BuildResponse
	Container
	Environment
	DescribeRequest
	DescribeResponse
	ListRequest
	ListResponse
	SSH
	SSHSetRequest
	SSHSetResponse
	SSHGetRequest
	SSHGetResponse
	DockerCfg
	DockerCfgSetRequest
	DockerCfgSetResponse
	DockerCfgGetRequest
	DockerCfgGetResponse
*/
package m8s

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Credentials is used for authenicating with the PR service.
type Credentials struct {
	Token string `protobuf:"bytes,1,opt,name=Token" json:"Token,omitempty"`
}

func (m *Credentials) Reset()                    { *m = Credentials{} }
func (m *Credentials) String() string            { return proto.CompactTextString(m) }
func (*Credentials) ProtoMessage()               {}
func (*Credentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Credentials) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// BuildRequest is used for submitting a new build.
type BuildRequest struct {
	Credentials *Credentials `protobuf:"bytes,1,opt,name=Credentials" json:"Credentials,omitempty"`
	Metadata    *Metadata    `protobuf:"bytes,2,opt,name=Metadata" json:"Metadata,omitempty"`
	Compose     *Compose     `protobuf:"bytes,3,opt,name=Compose" json:"Compose,omitempty"`
	GitCheckout *GitCheckout `protobuf:"bytes,4,opt,name=GitCheckout" json:"GitCheckout,omitempty"`
	Exec        *Exec        `protobuf:"bytes,5,opt,name=Exec" json:"Exec,omitempty"`
	Keep        string       `protobuf:"bytes,6,opt,name=Keep" json:"Keep,omitempty"`
}

func (m *BuildRequest) Reset()                    { *m = BuildRequest{} }
func (m *BuildRequest) String() string            { return proto.CompactTextString(m) }
func (*BuildRequest) ProtoMessage()               {}
func (*BuildRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BuildRequest) GetCredentials() *Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *BuildRequest) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *BuildRequest) GetCompose() *Compose {
	if m != nil {
		return m.Compose
	}
	return nil
}

func (m *BuildRequest) GetGitCheckout() *GitCheckout {
	if m != nil {
		return m.GitCheckout
	}
	return nil
}

func (m *BuildRequest) GetExec() *Exec {
	if m != nil {
		return m.Exec
	}
	return nil
}

func (m *BuildRequest) GetKeep() string {
	if m != nil {
		return m.Keep
	}
	return ""
}

// Metadata is high level information about the build.
type Metadata struct {
	Name      string     `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Domains   []string   `protobuf:"bytes,3,rep,name=Domains" json:"Domains,omitempty"`
	BasicAuth *BasicAuth `protobuf:"bytes,4,opt,name=BasicAuth" json:"BasicAuth,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Metadata) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metadata) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *Metadata) GetBasicAuth() *BasicAuth {
	if m != nil {
		return m.BasicAuth
	}
	return nil
}

type BasicAuth struct {
	User string `protobuf:"bytes,1,opt,name=User" json:"User,omitempty"`
	Pass string `protobuf:"bytes,2,opt,name=Pass" json:"Pass,omitempty"`
}

func (m *BasicAuth) Reset()                    { *m = BasicAuth{} }
func (m *BasicAuth) String() string            { return proto.CompactTextString(m) }
func (*BasicAuth) ProtoMessage()               {}
func (*BasicAuth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BasicAuth) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *BasicAuth) GetPass() string {
	if m != nil {
		return m.Pass
	}
	return ""
}

// GitCheckout is the details required to checkout the codebase.
type GitCheckout struct {
	// The repository we are cloning:
	// * https://github.com/owner/repo.git
	// * https://<token>:x-oauth-basic@github.com/owner/repo.git
	Repository string `protobuf:"bytes,1,opt,name=Repository" json:"Repository,omitempty"`
	Revision   string `protobuf:"bytes,2,opt,name=Revision" json:"Revision,omitempty"`
}

func (m *GitCheckout) Reset()                    { *m = GitCheckout{} }
func (m *GitCheckout) String() string            { return proto.CompactTextString(m) }
func (*GitCheckout) ProtoMessage()               {}
func (*GitCheckout) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GitCheckout) GetRepository() string {
	if m != nil {
		return m.Repository
	}
	return ""
}

func (m *GitCheckout) GetRevision() string {
	if m != nil {
		return m.Revision
	}
	return ""
}

// Compose is our environment data, marshalled from a docker compose file.
type Compose struct {
	Services []*ComposeService `protobuf:"bytes,1,rep,name=Services" json:"Services,omitempty"`
}

func (m *Compose) Reset()                    { *m = Compose{} }
func (m *Compose) String() string            { return proto.CompactTextString(m) }
func (*Compose) ProtoMessage()               {}
func (*Compose) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Compose) GetServices() []*ComposeService {
	if m != nil {
		return m.Services
	}
	return nil
}

// ComposeService is a container defintion, which we will use to build a pod.
type ComposeService struct {
	Name        string   `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Image       string   `protobuf:"bytes,2,opt,name=Image" json:"Image,omitempty"`
	Volumes     []string `protobuf:"bytes,3,rep,name=Volumes" json:"Volumes,omitempty"`
	Ports       []string `protobuf:"bytes,4,rep,name=Ports" json:"Ports,omitempty"`
	Environment []string `protobuf:"bytes,5,rep,name=Environment" json:"Environment,omitempty"`
}

func (m *ComposeService) Reset()                    { *m = ComposeService{} }
func (m *ComposeService) String() string            { return proto.CompactTextString(m) }
func (*ComposeService) ProtoMessage()               {}
func (*ComposeService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ComposeService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ComposeService) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *ComposeService) GetVolumes() []string {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *ComposeService) GetPorts() []string {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *ComposeService) GetEnvironment() []string {
	if m != nil {
		return m.Environment
	}
	return nil
}

// Exec has the steps we require to build an environment and in which container.
type Exec struct {
	Container string   `protobuf:"bytes,1,opt,name=Container" json:"Container,omitempty"`
	Steps     []string `protobuf:"bytes,5,rep,name=Steps" json:"Steps,omitempty"`
}

func (m *Exec) Reset()                    { *m = Exec{} }
func (m *Exec) String() string            { return proto.CompactTextString(m) }
func (*Exec) ProtoMessage()               {}
func (*Exec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Exec) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *Exec) GetSteps() []string {
	if m != nil {
		return m.Steps
	}
	return nil
}

// BuildResponse is a streamed response used for printing build output and status.
type BuildResponse struct {
	Message string `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
}

func (m *BuildResponse) Reset()                    { *m = BuildResponse{} }
func (m *BuildResponse) String() string            { return proto.CompactTextString(m) }
func (*BuildResponse) ProtoMessage()               {}
func (*BuildResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *BuildResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Container shows a container which is deployed in an Environment.
type Container struct {
	Name  string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Image string `protobuf:"bytes,2,opt,name=Image" json:"Image,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Container) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Container) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

// Environment shows a group of containers which have been deployed.
type Environment struct {
	Namespace  string       `protobuf:"bytes,1,opt,name=Namespace" json:"Namespace,omitempty"`
	Name       string       `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Domains    []string     `protobuf:"bytes,3,rep,name=Domains" json:"Domains,omitempty"`
	Containers []*Container `protobuf:"bytes,4,rep,name=Containers" json:"Containers,omitempty"`
}

func (m *Environment) Reset()                    { *m = Environment{} }
func (m *Environment) String() string            { return proto.CompactTextString(m) }
func (*Environment) ProtoMessage()               {}
func (*Environment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Environment) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Environment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Environment) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

func (m *Environment) GetContainers() []*Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

// DescribeRequest asks for an Environment which has already been deployed.
type DescribeRequest struct {
	Credentials *Credentials `protobuf:"bytes,1,opt,name=Credentials" json:"Credentials,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *DescribeRequest) Reset()                    { *m = DescribeRequest{} }
func (m *DescribeRequest) String() string            { return proto.CompactTextString(m) }
func (*DescribeRequest) ProtoMessage()               {}
func (*DescribeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DescribeRequest) GetCredentials() *Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *DescribeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// DescribeResponse responds with an Environment.
type DescribeResponse struct {
	Environment *Environment `protobuf:"bytes,1,opt,name=Environment" json:"Environment,omitempty"`
}

func (m *DescribeResponse) Reset()                    { *m = DescribeResponse{} }
func (m *DescribeResponse) String() string            { return proto.CompactTextString(m) }
func (*DescribeResponse) ProtoMessage()               {}
func (*DescribeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DescribeResponse) GetEnvironment() *Environment {
	if m != nil {
		return m.Environment
	}
	return nil
}

// DescribeRequest asks for all the Environments.
type ListRequest struct {
	Credentials *Credentials `protobuf:"bytes,1,opt,name=Credentials" json:"Credentials,omitempty"`
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ListRequest) GetCredentials() *Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

// ListResponse returns a list of Environments.
type ListResponse struct {
	Environments []*Environment `protobuf:"bytes,1,rep,name=Environments" json:"Environments,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListResponse) GetEnvironments() []*Environment {
	if m != nil {
		return m.Environments
	}
	return nil
}

// SSH containers secrets for performing SSH commands on private endpoints.
type SSH struct {
	KnownHosts []byte `protobuf:"bytes,1,opt,name=KnownHosts,proto3" json:"KnownHosts,omitempty"`
	PrivateKey []byte `protobuf:"bytes,2,opt,name=PrivateKey,proto3" json:"PrivateKey,omitempty"`
}

func (m *SSH) Reset()                    { *m = SSH{} }
func (m *SSH) String() string            { return proto.CompactTextString(m) }
func (*SSH) ProtoMessage()               {}
func (*SSH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SSH) GetKnownHosts() []byte {
	if m != nil {
		return m.KnownHosts
	}
	return nil
}

func (m *SSH) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

// SetSSHRequest allows for the developer to set SSH secrets "out of band".
type SSHSetRequest struct {
	Credentials *Credentials `protobuf:"bytes,1,opt,name=Credentials" json:"Credentials,omitempty"`
	SSH         *SSH         `protobuf:"bytes,2,opt,name=SSH" json:"SSH,omitempty"`
}

func (m *SSHSetRequest) Reset()                    { *m = SSHSetRequest{} }
func (m *SSHSetRequest) String() string            { return proto.CompactTextString(m) }
func (*SSHSetRequest) ProtoMessage()               {}
func (*SSHSetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *SSHSetRequest) GetCredentials() *Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *SSHSetRequest) GetSSH() *SSH {
	if m != nil {
		return m.SSH
	}
	return nil
}

// SetSSHResponse is a response after setting SSH.
type SSHSetResponse struct {
}

func (m *SSHSetResponse) Reset()                    { *m = SSHSetResponse{} }
func (m *SSHSetResponse) String() string            { return proto.CompactTextString(m) }
func (*SSHSetResponse) ProtoMessage()               {}
func (*SSHSetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

// SSHGetRequest request for the SSH configuration.
type SSHGetRequest struct {
	Credentials *Credentials `protobuf:"bytes,1,opt,name=Credentials" json:"Credentials,omitempty"`
}

func (m *SSHGetRequest) Reset()                    { *m = SSHGetRequest{} }
func (m *SSHGetRequest) String() string            { return proto.CompactTextString(m) }
func (*SSHGetRequest) ProtoMessage()               {}
func (*SSHGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *SSHGetRequest) GetCredentials() *Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

// SSHGetResponse returns the SSH configuration.
type SSHGetResponse struct {
	SSH *SSH `protobuf:"bytes,1,opt,name=SSH" json:"SSH,omitempty"`
}

func (m *SSHGetResponse) Reset()                    { *m = SSHGetResponse{} }
func (m *SSHGetResponse) String() string            { return proto.CompactTextString(m) }
func (*SSHGetResponse) ProtoMessage()               {}
func (*SSHGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *SSHGetResponse) GetSSH() *SSH {
	if m != nil {
		return m.SSH
	}
	return nil
}

// DockerCfg contains standard Docker configuration eg ~/.docker/config
type DockerCfg struct {
	Registry string `protobuf:"bytes,1,opt,name=Registry" json:"Registry,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=Username" json:"Username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=Password" json:"Password,omitempty"`
	Email    string `protobuf:"bytes,4,opt,name=Email" json:"Email,omitempty"`
	Auth     string `protobuf:"bytes,5,opt,name=Auth" json:"Auth,omitempty"`
}

func (m *DockerCfg) Reset()                    { *m = DockerCfg{} }
func (m *DockerCfg) String() string            { return proto.CompactTextString(m) }
func (*DockerCfg) ProtoMessage()               {}
func (*DockerCfg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *DockerCfg) GetRegistry() string {
	if m != nil {
		return m.Registry
	}
	return ""
}

func (m *DockerCfg) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *DockerCfg) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *DockerCfg) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *DockerCfg) GetAuth() string {
	if m != nil {
		return m.Auth
	}
	return ""
}

// DockerCfgSetRequest is for setting new Docker configuration.
type DockerCfgSetRequest struct {
	Credentials *Credentials `protobuf:"bytes,1,opt,name=Credentials" json:"Credentials,omitempty"`
	DockerCfg   *DockerCfg   `protobuf:"bytes,2,opt,name=DockerCfg" json:"DockerCfg,omitempty"`
}

func (m *DockerCfgSetRequest) Reset()                    { *m = DockerCfgSetRequest{} }
func (m *DockerCfgSetRequest) String() string            { return proto.CompactTextString(m) }
func (*DockerCfgSetRequest) ProtoMessage()               {}
func (*DockerCfgSetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *DockerCfgSetRequest) GetCredentials() *Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *DockerCfgSetRequest) GetDockerCfg() *DockerCfg {
	if m != nil {
		return m.DockerCfg
	}
	return nil
}

// DockerCfgSetResponse returns if setting the Docker configuration was a success.
type DockerCfgSetResponse struct {
}

func (m *DockerCfgSetResponse) Reset()                    { *m = DockerCfgSetResponse{} }
func (m *DockerCfgSetResponse) String() string            { return proto.CompactTextString(m) }
func (*DockerCfgSetResponse) ProtoMessage()               {}
func (*DockerCfgSetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

// DockerCfgGetRequest requests the Docker configuration.
type DockerCfgGetRequest struct {
	Credentials *Credentials `protobuf:"bytes,1,opt,name=Credentials" json:"Credentials,omitempty"`
}

func (m *DockerCfgGetRequest) Reset()                    { *m = DockerCfgGetRequest{} }
func (m *DockerCfgGetRequest) String() string            { return proto.CompactTextString(m) }
func (*DockerCfgGetRequest) ProtoMessage()               {}
func (*DockerCfgGetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *DockerCfgGetRequest) GetCredentials() *Credentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

// DockerCfgGetResponse returns the Docker configuration.
type DockerCfgGetResponse struct {
	DockerCfg *DockerCfg `protobuf:"bytes,1,opt,name=DockerCfg" json:"DockerCfg,omitempty"`
}

func (m *DockerCfgGetResponse) Reset()                    { *m = DockerCfgGetResponse{} }
func (m *DockerCfgGetResponse) String() string            { return proto.CompactTextString(m) }
func (*DockerCfgGetResponse) ProtoMessage()               {}
func (*DockerCfgGetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DockerCfgGetResponse) GetDockerCfg() *DockerCfg {
	if m != nil {
		return m.DockerCfg
	}
	return nil
}

func init() {
	proto.RegisterType((*Credentials)(nil), "m8s.Credentials")
	proto.RegisterType((*BuildRequest)(nil), "m8s.BuildRequest")
	proto.RegisterType((*Metadata)(nil), "m8s.Metadata")
	proto.RegisterType((*BasicAuth)(nil), "m8s.BasicAuth")
	proto.RegisterType((*GitCheckout)(nil), "m8s.GitCheckout")
	proto.RegisterType((*Compose)(nil), "m8s.Compose")
	proto.RegisterType((*ComposeService)(nil), "m8s.ComposeService")
	proto.RegisterType((*Exec)(nil), "m8s.Exec")
	proto.RegisterType((*BuildResponse)(nil), "m8s.BuildResponse")
	proto.RegisterType((*Container)(nil), "m8s.Container")
	proto.RegisterType((*Environment)(nil), "m8s.Environment")
	proto.RegisterType((*DescribeRequest)(nil), "m8s.DescribeRequest")
	proto.RegisterType((*DescribeResponse)(nil), "m8s.DescribeResponse")
	proto.RegisterType((*ListRequest)(nil), "m8s.ListRequest")
	proto.RegisterType((*ListResponse)(nil), "m8s.ListResponse")
	proto.RegisterType((*SSH)(nil), "m8s.SSH")
	proto.RegisterType((*SSHSetRequest)(nil), "m8s.SSHSetRequest")
	proto.RegisterType((*SSHSetResponse)(nil), "m8s.SSHSetResponse")
	proto.RegisterType((*SSHGetRequest)(nil), "m8s.SSHGetRequest")
	proto.RegisterType((*SSHGetResponse)(nil), "m8s.SSHGetResponse")
	proto.RegisterType((*DockerCfg)(nil), "m8s.DockerCfg")
	proto.RegisterType((*DockerCfgSetRequest)(nil), "m8s.DockerCfgSetRequest")
	proto.RegisterType((*DockerCfgSetResponse)(nil), "m8s.DockerCfgSetResponse")
	proto.RegisterType((*DockerCfgGetRequest)(nil), "m8s.DockerCfgGetRequest")
	proto.RegisterType((*DockerCfgGetResponse)(nil), "m8s.DockerCfgGetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for M8S service

type M8SClient interface {
	Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (M8S_BuildClient, error)
	Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Used for setting and getting SSH credentials.
	SSHSet(ctx context.Context, in *SSHSetRequest, opts ...grpc.CallOption) (*SSHSetResponse, error)
	SSHGet(ctx context.Context, in *SSHGetRequest, opts ...grpc.CallOption) (*SSHGetResponse, error)
	// Used for setting and getting Docker registry secrets.
	DockerCfgSet(ctx context.Context, in *DockerCfgSetRequest, opts ...grpc.CallOption) (*DockerCfgSetResponse, error)
	DockerCfgGet(ctx context.Context, in *DockerCfgGetRequest, opts ...grpc.CallOption) (*DockerCfgGetResponse, error)
}

type m8SClient struct {
	cc *grpc.ClientConn
}

func NewM8SClient(cc *grpc.ClientConn) M8SClient {
	return &m8SClient{cc}
}

func (c *m8SClient) Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (M8S_BuildClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_M8S_serviceDesc.Streams[0], c.cc, "/m8s.m8s/Build", opts...)
	if err != nil {
		return nil, err
	}
	x := &m8SBuildClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type M8S_BuildClient interface {
	Recv() (*BuildResponse, error)
	grpc.ClientStream
}

type m8SBuildClient struct {
	grpc.ClientStream
}

func (x *m8SBuildClient) Recv() (*BuildResponse, error) {
	m := new(BuildResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *m8SClient) Describe(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*DescribeResponse, error) {
	out := new(DescribeResponse)
	err := grpc.Invoke(ctx, "/m8s.m8s/Describe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *m8SClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/m8s.m8s/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *m8SClient) SSHSet(ctx context.Context, in *SSHSetRequest, opts ...grpc.CallOption) (*SSHSetResponse, error) {
	out := new(SSHSetResponse)
	err := grpc.Invoke(ctx, "/m8s.m8s/SSHSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *m8SClient) SSHGet(ctx context.Context, in *SSHGetRequest, opts ...grpc.CallOption) (*SSHGetResponse, error) {
	out := new(SSHGetResponse)
	err := grpc.Invoke(ctx, "/m8s.m8s/SSHGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *m8SClient) DockerCfgSet(ctx context.Context, in *DockerCfgSetRequest, opts ...grpc.CallOption) (*DockerCfgSetResponse, error) {
	out := new(DockerCfgSetResponse)
	err := grpc.Invoke(ctx, "/m8s.m8s/DockerCfgSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *m8SClient) DockerCfgGet(ctx context.Context, in *DockerCfgGetRequest, opts ...grpc.CallOption) (*DockerCfgGetResponse, error) {
	out := new(DockerCfgGetResponse)
	err := grpc.Invoke(ctx, "/m8s.m8s/DockerCfgGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for M8S service

type M8SServer interface {
	Build(*BuildRequest, M8S_BuildServer) error
	Describe(context.Context, *DescribeRequest) (*DescribeResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	// Used for setting and getting SSH credentials.
	SSHSet(context.Context, *SSHSetRequest) (*SSHSetResponse, error)
	SSHGet(context.Context, *SSHGetRequest) (*SSHGetResponse, error)
	// Used for setting and getting Docker registry secrets.
	DockerCfgSet(context.Context, *DockerCfgSetRequest) (*DockerCfgSetResponse, error)
	DockerCfgGet(context.Context, *DockerCfgGetRequest) (*DockerCfgGetResponse, error)
}

func RegisterM8SServer(s *grpc.Server, srv M8SServer) {
	s.RegisterService(&_M8S_serviceDesc, srv)
}

func _M8S_Build_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(M8SServer).Build(m, &m8SBuildServer{stream})
}

type M8S_BuildServer interface {
	Send(*BuildResponse) error
	grpc.ServerStream
}

type m8SBuildServer struct {
	grpc.ServerStream
}

func (x *m8SBuildServer) Send(m *BuildResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _M8S_Describe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M8SServer).Describe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m8s.m8s/Describe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M8SServer).Describe(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _M8S_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M8SServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m8s.m8s/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M8SServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _M8S_SSHSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M8SServer).SSHSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m8s.m8s/SSHSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M8SServer).SSHSet(ctx, req.(*SSHSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _M8S_SSHGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSHGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M8SServer).SSHGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m8s.m8s/SSHGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M8SServer).SSHGet(ctx, req.(*SSHGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _M8S_DockerCfgSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockerCfgSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M8SServer).DockerCfgSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m8s.m8s/DockerCfgSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M8SServer).DockerCfgSet(ctx, req.(*DockerCfgSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _M8S_DockerCfgGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockerCfgGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M8SServer).DockerCfgGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m8s.m8s/DockerCfgGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M8SServer).DockerCfgGet(ctx, req.(*DockerCfgGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _M8S_serviceDesc = grpc.ServiceDesc{
	ServiceName: "m8s.m8s",
	HandlerType: (*M8SServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Describe",
			Handler:    _M8S_Describe_Handler,
		},
		{
			MethodName: "List",
			Handler:    _M8S_List_Handler,
		},
		{
			MethodName: "SSHSet",
			Handler:    _M8S_SSHSet_Handler,
		},
		{
			MethodName: "SSHGet",
			Handler:    _M8S_SSHGet_Handler,
		},
		{
			MethodName: "DockerCfgSet",
			Handler:    _M8S_DockerCfgSet_Handler,
		},
		{
			MethodName: "DockerCfgGet",
			Handler:    _M8S_DockerCfgGet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Build",
			Handler:       _M8S_Build_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "m8s.proto",
}

func init() { proto.RegisterFile("m8s.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 848 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x4e, 0xe3, 0x46,
	0x14, 0xae, 0x9b, 0x04, 0xe2, 0x93, 0x40, 0x61, 0x48, 0x2b, 0x37, 0x6a, 0x2b, 0x34, 0x95, 0x2a,
	0x90, 0x28, 0xad, 0x42, 0x2b, 0x51, 0xee, 0x20, 0x49, 0x1d, 0x44, 0xa9, 0xd0, 0xb8, 0xad, 0xd4,
	0xab, 0xca, 0x24, 0x03, 0x8c, 0x88, 0x3d, 0xa9, 0x67, 0x12, 0x96, 0x47, 0x40, 0xda, 0x37, 0xd8,
	0x57, 0xdd, 0x8b, 0xd5, 0xcc, 0xd8, 0xe3, 0x31, 0x64, 0xb5, 0xbb, 0xca, 0x9d, 0xcf, 0x77, 0xfe,
	0xbe, 0xf3, 0x33, 0x27, 0x01, 0x3f, 0x39, 0x16, 0x87, 0xb3, 0x8c, 0x4b, 0x8e, 0x6a, 0xc9, 0xb1,
	0xc0, 0xdf, 0x43, 0xab, 0x9f, 0xd1, 0x09, 0x4d, 0x25, 0x8b, 0xa7, 0x02, 0x75, 0xa0, 0xf1, 0x17,
	0xbf, 0xa7, 0x69, 0xe0, 0xed, 0x7a, 0x7b, 0x3e, 0x31, 0x02, 0x7e, 0xeb, 0x41, 0xfb, 0x6c, 0xce,
	0xa6, 0x13, 0x42, 0xff, 0x9f, 0x53, 0x21, 0x51, 0xaf, 0xe2, 0xa5, 0x8d, 0x5b, 0xbd, 0xad, 0x43,
	0x15, 0xdb, 0xc1, 0x49, 0x25, 0xf4, 0x3e, 0x34, 0x2f, 0xa9, 0x8c, 0x27, 0xb1, 0x8c, 0x83, 0xcf,
	0xb5, 0xc3, 0x86, 0x76, 0x28, 0x40, 0x62, 0xd5, 0xe8, 0x07, 0x58, 0xef, 0xf3, 0x64, 0xc6, 0x05,
	0x0d, 0x6a, 0xda, 0xb2, 0x6d, 0x42, 0x1b, 0x8c, 0x14, 0x4a, 0x45, 0x23, 0x64, 0xb2, 0x7f, 0x47,
	0xc7, 0xf7, 0x7c, 0x2e, 0x83, 0xba, 0x43, 0xc3, 0xc1, 0x89, 0x6b, 0x84, 0xbe, 0x85, 0xfa, 0xf0,
	0x15, 0x1d, 0x07, 0x0d, 0x6d, 0xec, 0x6b, 0x63, 0x05, 0x10, 0x0d, 0x23, 0x04, 0xf5, 0x0b, 0x4a,
	0x67, 0xc1, 0x9a, 0xae, 0x5f, 0x7f, 0xe3, 0x9b, 0x92, 0xb9, 0xd2, 0xff, 0x19, 0x27, 0x54, 0x57,
	0xe0, 0x13, 0xfd, 0x8d, 0x02, 0x58, 0x1f, 0xf0, 0x24, 0x66, 0xa9, 0x08, 0x6a, 0xbb, 0xb5, 0x3d,
	0x9f, 0x14, 0x22, 0x3a, 0x00, 0xff, 0x2c, 0x16, 0x6c, 0x7c, 0x3a, 0x97, 0x77, 0x39, 0xbd, 0x4d,
	0x9d, 0xd1, 0xa2, 0xa4, 0x34, 0xc0, 0x47, 0x8e, 0xb5, 0x4a, 0xf4, 0xb7, 0xa0, 0x59, 0x3e, 0x08,
	0xfd, 0xad, 0xb0, 0xab, 0x58, 0x88, 0x22, 0xb9, 0xfa, 0xc6, 0xe7, 0x95, 0x1e, 0xa0, 0xef, 0x00,
	0x08, 0x9d, 0x71, 0xc1, 0x24, 0xcf, 0x1e, 0x73, 0x67, 0x07, 0x41, 0x5d, 0x68, 0x12, 0xba, 0x60,
	0x82, 0xf1, 0x34, 0x0f, 0x63, 0x65, 0x7c, 0x62, 0xdb, 0x8e, 0x7e, 0x82, 0x66, 0x44, 0xb3, 0x05,
	0x1b, 0x53, 0x35, 0xdd, 0xda, 0x5e, 0xab, 0xb7, 0xe3, 0x8e, 0x20, 0xd7, 0x11, 0x6b, 0x84, 0x5f,
	0x7b, 0xb0, 0x59, 0x55, 0xda, 0x56, 0x79, 0x4e, 0xab, 0x3a, 0xd0, 0x38, 0x4f, 0xe2, 0xdb, 0xa2,
	0x7f, 0x46, 0x50, 0x0d, 0xfc, 0x87, 0x4f, 0xe7, 0x09, 0xb5, 0x0d, 0xcc, 0x45, 0x65, 0x7f, 0xc5,
	0x33, 0x29, 0x82, 0xba, 0xc6, 0x8d, 0x80, 0x76, 0xa1, 0x35, 0x4c, 0x17, 0x2c, 0xe3, 0x69, 0x42,
	0x53, 0x19, 0x34, 0xb4, 0xce, 0x85, 0xf0, 0x89, 0x99, 0x32, 0xfa, 0x06, 0xfc, 0x3e, 0x4f, 0x65,
	0xcc, 0x52, 0xdb, 0xca, 0x12, 0x50, 0xd1, 0x23, 0x49, 0x67, 0x22, 0x8f, 0x60, 0x04, 0xbc, 0x0f,
	0x1b, 0xf9, 0xb2, 0x8b, 0x19, 0x4f, 0x85, 0xa6, 0x77, 0x49, 0x85, 0x50, 0xb4, 0x4d, 0x88, 0x42,
	0xc4, 0xbf, 0x3a, 0xe1, 0x3f, 0xbe, 0x5e, 0xfc, 0xe4, 0x55, 0x0a, 0x50, 0x2c, 0x95, 0xb5, 0x98,
	0xc5, 0xe3, 0xc2, 0xbd, 0x04, 0x3e, 0x71, 0xe5, 0x0e, 0x01, 0x2c, 0x25, 0xd3, 0xb6, 0x62, 0xe7,
	0x2c, 0x4c, 0x1c, 0x0b, 0xfc, 0x2f, 0x7c, 0x31, 0xa0, 0x62, 0x9c, 0xb1, 0x6b, 0xba, 0xca, 0xeb,
	0x5e, 0x42, 0x12, 0xff, 0x0e, 0x5b, 0x65, 0xe8, 0xbc, 0x97, 0xbd, 0xea, 0xe8, 0xdc, 0xd8, 0x0e,
	0x5e, 0x1d, 0xe6, 0x29, 0xb4, 0xfe, 0x60, 0x42, 0xae, 0x40, 0x0f, 0x0f, 0xa0, 0x6d, 0x42, 0xe4,
	0x34, 0x7e, 0x81, 0xb6, 0x93, 0xa1, 0xd8, 0xf1, 0x97, 0x3c, 0x2a, 0x56, 0x78, 0x08, 0xb5, 0x28,
	0x1a, 0xa9, 0x37, 0x76, 0x91, 0xf2, 0x87, 0x74, 0xc4, 0x85, 0x34, 0xf9, 0xdb, 0xc4, 0x41, 0x94,
	0xfe, 0x2a, 0x63, 0x8b, 0x58, 0xd2, 0x0b, 0xfa, 0xa8, 0x3b, 0xd2, 0x26, 0x0e, 0x82, 0xff, 0x83,
	0x8d, 0x28, 0x1a, 0x45, 0x74, 0x95, 0x8a, 0x50, 0x57, 0x73, 0xc9, 0x2f, 0x69, 0x53, 0xdb, 0x46,
	0xd1, 0x88, 0x28, 0x10, 0x6f, 0xc1, 0x66, 0x91, 0xc0, 0xd4, 0x8b, 0xfb, 0x3a, 0x65, 0xb8, 0x52,
	0x4a, 0x7c, 0xa0, 0xc3, 0x86, 0x65, 0xd8, 0x82, 0x84, 0xb7, 0x8c, 0xc4, 0x93, 0x07, 0xfe, 0x80,
	0x8f, 0xef, 0x69, 0xd6, 0xbf, 0xb9, 0x35, 0x77, 0xe7, 0x96, 0x09, 0x69, 0xaf, 0x92, 0x95, 0x95,
	0x4e, 0x9d, 0xb7, 0xb4, 0xdc, 0x1f, 0x2b, 0x2b, 0x9d, 0x3a, 0x73, 0x0f, 0x3c, 0x9b, 0xe8, 0xdf,
	0x02, 0x9f, 0x58, 0x59, 0x3d, 0xae, 0x61, 0x12, 0xb3, 0xa9, 0xbe, 0xac, 0x3e, 0x31, 0x82, 0xda,
	0x44, 0x7d, 0x6e, 0x1b, 0x66, 0x13, 0xf5, 0x65, 0x7d, 0x80, 0x1d, 0x4b, 0x65, 0xc5, 0xbe, 0x1f,
	0x38, 0x55, 0xe5, 0xdd, 0x37, 0xcf, 0xcb, 0xa2, 0xa4, 0x34, 0xc0, 0x5f, 0x41, 0xa7, 0x9a, 0x38,
	0x9f, 0xc7, 0xb9, 0x43, 0x68, 0xc5, 0xa9, 0x0c, 0x9c, 0x14, 0xee, 0x6c, 0x2a, 0x44, 0xbd, 0x0f,
	0x10, 0xed, 0xbd, 0xa9, 0x81, 0xfa, 0x3f, 0x80, 0x7a, 0xd0, 0xd0, 0xc7, 0x0f, 0x6d, 0x9b, 0xdf,
	0x29, 0xe7, 0x57, 0xbf, 0x8b, 0x5c, 0x28, 0x2f, 0xe4, 0xb3, 0x9f, 0x3d, 0xf4, 0x1b, 0x34, 0x8b,
	0x77, 0x8e, 0x3a, 0x26, 0x45, 0xf5, 0xa2, 0x74, 0xbf, 0x7c, 0x86, 0x16, 0xce, 0xe8, 0x47, 0xa8,
	0xab, 0x77, 0x89, 0x4c, 0x8d, 0xce, 0x2b, 0xef, 0x6e, 0x3b, 0x88, 0x35, 0x3f, 0x82, 0x35, 0xb3,
	0xd8, 0x08, 0x15, 0xcb, 0x56, 0x8e, 0xb3, 0xbb, 0x53, 0xc1, 0x9e, 0x39, 0x85, 0xae, 0x53, 0xb8,
	0xc4, 0x29, 0xac, 0x38, 0x0d, 0xa1, 0xed, 0x0e, 0x0e, 0x05, 0xd5, 0xd6, 0x39, 0x59, 0xbf, 0x5e,
	0xa2, 0x59, 0x1a, 0x26, 0x7c, 0x19, 0x26, 0x7c, 0x6f, 0x98, 0x0a, 0x9b, 0xeb, 0x35, 0xfd, 0x8f,
	0xed, 0xe8, 0x5d, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x4b, 0x80, 0x84, 0xbe, 0x09, 0x00, 0x00,
}
